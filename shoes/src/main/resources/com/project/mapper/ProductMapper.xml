<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.ProductMapper">

	<resultMap type="com.project.domain.ProductDTO" id="productMap">
		<id column="product_id" property="productId"/>
		<result column="product_name" property="productName"/>
		<result column="price" property="price"/>
		<result column="colors" property="colors"/>
		<collection property="attachmentList" resultMap="attachmentMap"/>
	</resultMap>
	<resultMap type="com.project.domain.AttachmentDTO" id="attachmentMap">
		<id column="uuid" property="uuid"/>
		<result column="product_id" property="productId"/>
		<result column="upload_path" property="uploadPath"/>
		<result column="file_name" property="fileName"/>
	</resultMap>

 	<select id="getOnSaleList" resultMap="productMap">
 		select p.product_id, p.product_name, p.price, p.colors, p.registered_date, p.sold_count, a.uuid, a.upload_path, a.file_name, p.rnum
		from (
			select product_id, product_name, price, colors, registered_date, sold_count, ROW_NUMBER() over(order by
		    <choose>
		      <when test="order== 'registered-date-desc'">registered_date desc</when>
		      <when test="order== 'sold-count-desc'">sold_count desc</when>
		      <when test="order== 'price-desc'">price desc</when>
		      <when test="order== 'price-asc'">price asc</when>
		      <otherwise></otherwise>
		    </choose>
		     ) rnum
		    from products 
		    where on_sale = 1 and discontinued = 0
		    <choose>
		      <when test="gender== 'for-men'">and for_men=1 </when>
		      <when test="gender== 'for-women'">and for_women=1 </when>
		      <otherwise></otherwise>
		    </choose>
		    <choose>
		      <when test="category== 'running'">and category = '운동화'</when>
		      <when test="category== 'shoes'">and category = '구두'</when>
		      <when test="category== 'slipper'">and category = '슬리퍼'</when>
		      <otherwise></otherwise>
		    </choose>
		) p
		left outer join attachments a on p.product_id = a.product_id 
		where p.rnum between ((#{page}-1)*#{listAmount})+1 and (#{page}*#{listAmount})
		 order by
		  <choose>
		      <when test="order== 'registered-date-desc'">registered_date desc</when>
		      <when test="order== 'sold-count-desc'">sold_count desc</when>
		      <when test="order== 'price-desc'">price desc</when>
		      <when test="order== 'price-asc'">price asc</when>
		      <otherwise></otherwise>
		   </choose>
	</select>
	
	<select id="getOnSaleCount">
		select count(*) from products where on_sale = 1 and discontinued = 0
			<choose>
		      <when test="gender== 'for-men'">and for_men=1 </when>
		      <when test="gender== 'for-women'">and for_women=1 </when>
		      <otherwise></otherwise>
		    </choose>
		    <choose>
		      <when test="category== 'running'">and category = '운동화'</when>
		      <when test="category== 'shoes'">and category = '구두'</when>
		      <when test="category== 'slipper'">and category = '슬리퍼'</when>
		      <otherwise></otherwise>
		    </choose>
	</select>
	
	<select id="getOffCount">
		select count(*) from products where on_sale = 0 and discontinued = 0
	</select>

	<select id="getTotalList">
		select product_id, product_name, category, brand, price, product_country, product_year
			   on_sale, sold_count, to_char(registered_date,'yyyy-MM-dd HH:mm:ss') as registered_date,
			   to_char(modified_date,'yyyy-MM-dd HH:mm:ss') as modified_date from products where
			<choose>
		      <when test="discontinued==1"> discontinued = 1 </when>
		      <otherwise>discontinued = 0</otherwise>
		    </choose>
			<choose>
		      <when test="searchType == 'productId'"> and product_id = #{keyword} </when>
		      <when test="searchType == 'productName'"> and product_name like CONCAT('%',CONCAT(#{keyword},'%')) </when>
		      <otherwise></otherwise>
		    </choose>
		order by registered_date desc
	</select>
	
	<insert id="insertProduct">
		insert into products (product_id, category, brand, detail, price, product_country, product_year, 
							  product_name, on_sale, sold_count, for_men, for_women, colors)
			values(products_seq.nextval,#{category},#{brand},#{detail},#{price},#{productCountry},
					#{productYear},#{productName},#{onSale},0,#{forMen},#{forWomen},#{colors})
	</insert>

	<select id="getCurrentProductSequence">
		select products_seq.currval from dual
	</select>
	
	<select id="getProduct" resultType="com.project.domain.ProductDTO">
		select * from products where product_id = #{productId}
	</select>
	
	<update id="updateProduct">
		 update products set category=#{category}, brand=#{brand}, detail=#{detail}, price=#{price},
		 					 discount_price=#{discountPrice}, product_country=#{productCountry},
		 					 product_year=#{productYear}, product_name=#{productName}, on_sale=#{onSale},
		 					 modified_date=sysdate, for_men=#{forMen}, for_women=#{forWomen}, discontinued=#{discontinued}
		 where product_id = #{productId}
	</update>

</mapper>